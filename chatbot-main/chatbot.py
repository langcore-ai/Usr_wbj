# <<<<<<< Updated upstream
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'chatbot.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget
import sys
import requests
import pic
import time
import urllib.parse
import hashlib
import random


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(600, 400)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/button/pic/机器人.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setMinimumSize(QtCore.QSize(50, 40))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/button/pic/发送.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setIconSize(QtCore.QSize(50, 35))
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 1, 1, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setMinimumSize(QtCore.QSize(300, 100))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout.addWidget(self.textBrowser, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setMinimumSize(QtCore.QSize(300, 40))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 1, 0, 1, 1)
        self.label = QtWidgets.QLabel(Form)
        self.label.setStyleSheet("image: url(:/button/pic/bot.png);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 1, 1, 1)
        self.retranslateUi(Form)

        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "聊天机器人"))
        self.pushButton.setToolTip(_translate("Form", "发送"))
        self.lineEdit.setToolTip(_translate("Form", "请输入文字"))
        self.label.setToolTip(_translate("Form", "我叫小阔落"))


class Main(Ui_Form, QWidget):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.myMsg)
        self.lineEdit.returnPressed.connect(self.myMsg)
        self.pushButton.clicked.connect(self.lineEdit.clear)
        self.lineEdit.returnPressed.connect(self.lineEdit.clear)
        self.session = str(random.randint(10000, 99999))

    def myMsg(self):
        self.textBrowser.append('我：' + self.lineEdit.text())
        botmsg = self.rMsg()
        time.sleep(0.1)
        if botmsg['ret'] == 0:
            self.textBrowser.append('小阔落：' + botmsg['data']['answer'] + '\n')
        elif botmsg['ret'] == 16388:
            self.textBrowser.append('程序：出错了~' + '\n')
        elif botmsg['ret'] == 16394:
            self.textBrowser.append('小阔落：不知道你在说什么~' + '\n')
        elif botmsg['ret'] == 4096:
            self.textBrowser.append('小阔落：别不说话啊~' + '\n')
        elif botmsg['ret'] == 10:
            self.textBrowser.append('小阔落：断网了哦~' + '\n')
        else:
            self.textBrowser.append('小阔落：' + str(botmsg['ret']) + '\n')

    def rMsg(self):
        session = self.session
        question = self.lineEdit.text()
        time_stamp = str(int(time.time()))
        nonce_str = ''.join(random.sample('0123456789abcdefghijklmnopqrstuvwxyz', 10))
        params = {'app_id': '2159897410', 'session': session, 'question': question, 'time_stamp': time_stamp,
                  'nonce_str': nonce_str, 'sign': ''}
        appkey = "mAQaGIATk7LVQEnc"
        params['sign'] = self.getReqSign(params, appkey)
        url = "https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat"
        try:
            r = requests.post(url=url, data=params).text
            return eval(r)
        except:
            return {'ret': 10}

    @staticmethod
    def getReqSign(params, appkey):
        strold = []
        for key, value in sorted(params.items()):
            if value != '':
                strold.append(key + '=' + urllib.parse.quote_plus(value) + '&')
        strold.append('app_key=' + appkey)
        strnew = "".join(strold)
        sign = hashlib.md5(strnew.encode()).hexdigest().upper()
        return sign


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = Main()
    win.show()
# =======
# # -*- coding: utf-8 -*-
#
# # Form implementation generated from reading ui file 'chatbot.ui'
# #
# # Created by: PyQt5 UI code generator 5.15.1
# #
# # WARNING: Any manual changes made to this file will be lost when pyuic5 is
# # run again.  Do not edit this file unless you know what you are doing.
#
#
# from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtWidgets import QApplication, QWidget
# import sys
# import requests
# import pic
# import time
# import urllib.parse
# import hashlib
# import random
#
#
# class Ui_Form(object):
#     def setupUi(self, Form):
#         Form.setObjectName("Form")
#         Form.resize(600, 400)
#         icon = QtGui.QIcon()
#         icon.addPixmap(QtGui.QPixmap(":/button/pic/机器人.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
#         Form.setWindowIcon(icon)
#         self.gridLayout = QtWidgets.QGridLayout(Form)
#         self.gridLayout.setObjectName("gridLayout")
#         self.pushButton = QtWidgets.QPushButton(Form)
#         self.pushButton.setMinimumSize(QtCore.QSize(50, 40))
#         self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
#         self.pushButton.setText("")
#         icon1 = QtGui.QIcon()
#         icon1.addPixmap(QtGui.QPixmap(":/button/pic/发送.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
#         self.pushButton.setIcon(icon1)
#         self.pushButton.setIconSize(QtCore.QSize(50, 35))
#         self.pushButton.setObjectName("pushButton")
#         self.gridLayout.addWidget(self.pushButton, 1, 1, 1, 1)
#         self.textBrowser = QtWidgets.QTextBrowser(Form)
#         self.textBrowser.setMinimumSize(QtCore.QSize(300, 100))
#         font = QtGui.QFont()
#         font.setPointSize(15)
#         self.textBrowser.setFont(font)
#         self.textBrowser.setObjectName("textBrowser")
#         self.gridLayout.addWidget(self.textBrowser, 0, 0, 1, 1)
#         self.lineEdit = QtWidgets.QLineEdit(Form)
#         self.lineEdit.setMinimumSize(QtCore.QSize(300, 40))
#         font = QtGui.QFont()
#         font.setPointSize(15)
#         self.lineEdit.setFont(font)
#         self.lineEdit.setObjectName("lineEdit")
#         self.gridLayout.addWidget(self.lineEdit, 1, 0, 1, 1)
#         self.label = QtWidgets.QLabel(Form)
#         self.label.setStyleSheet("image: url(:/button/pic/bot.png);")
#         self.label.setText("")
#         self.label.setObjectName("label")
#         self.gridLayout.addWidget(self.label, 0, 1, 1, 1)
#         self.retranslateUi(Form)
#
#         QtCore.QMetaObject.connectSlotsByName(Form)
#
#     def retranslateUi(self, Form):
#         _translate = QtCore.QCoreApplication.translate
#         Form.setWindowTitle(_translate("Form", "聊天机器人"))
#         self.pushButton.setToolTip(_translate("Form", "发送"))
#         self.lineEdit.setToolTip(_translate("Form", "请输入文字"))
#         self.label.setToolTip(_translate("Form", "我叫小阔落"))
#
#
# class Main(Ui_Form, QWidget):
#     def __init__(self):
#         super().__init__()
#         self.setupUi(self)
#         self.pushButton.clicked.connect(self.myMsg)
#         self.lineEdit.returnPressed.connect(self.myMsg)
#         self.pushButton.clicked.connect(self.lineEdit.clear)
#         self.lineEdit.returnPressed.connect(self.lineEdit.clear)
#         self.session = str(random.randint(10000, 99999))
#
#     def myMsg(self):
#         self.textBrowser.append('我：' + self.lineEdit.text())
#         botmsg = self.rMsg()
#         time.sleep(0.1)
#         if botmsg['ret'] == 0:
#             self.textBrowser.append('小阔落：' + botmsg['data']['answer'] + '\n')
#         elif botmsg['ret'] == 16388:
#             self.textBrowser.append('程序：出错了~' + '\n')
#         elif botmsg['ret'] == 16394:
#             self.textBrowser.append('小阔落：不知道你在说什么~' + '\n')
#         elif botmsg['ret'] == 4096:
#             self.textBrowser.append('小阔落：别不说话啊~' + '\n')
#         elif botmsg['ret'] == 10:
#             self.textBrowser.append('小阔落：断网了哦~' + '\n')
#         else:
#             self.textBrowser.append('小阔落：' + str(botmsg['ret']) + '\n')
#
#     def rMsg(self):
#         session = self.session
#         question = self.lineEdit.text()
#         time_stamp = str(int(time.time()))
#         nonce_str = ''.join(random.sample('0123456789abcdefghijklmnopqrstuvwxyz', 10))
#         params = {'app_id': '2159897410', 'session': session, 'question': question, 'time_stamp': time_stamp,
#                   'nonce_str': nonce_str, 'sign': ''}
#         appkey = "mAQaGIATk7LVQEnc"
#         params['sign'] = self.getReqSign(params, appkey)
#         url = "https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat"
#         try:
#             r = requests.post(url=url, data=params).text
#             return eval(r)
#         except:
#             return {'ret': 10}
#
#     @staticmethod
#     def getReqSign(params, appkey):
#         strold = []
#         for key, value in sorted(params.items()):
#             if value != '':
#                 strold.append(key + '=' + urllib.parse.quote_plus(value) + '&')
#         strold.append('app_key=' + appkey)
#         strnew = "".join(strold)
#         sign = hashlib.md5(strnew.encode()).hexdigest().upper()
#         return sign
#
#
# if __name__ == '__main__':
#     app = QApplication(sys.argv)
#     win = Main()
#     win.show()
# >>>>>>> Stashed changes
    sys.exit(app.exec_())